{"version":3,"sources":["../node_modules/peerjs/dist sync","routes/CreateRoom.js","routes/Room.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","CreateRoom","props","onClick","history","push","peer","Peer","undefined","host","path","secure","config","iceServers","urls","username","credential","socket","io","connect","Container","styled","div","StyledVideo","video","Video","ref","useRef","useEffect","current","srcObject","src","playsInline","autoPlay","Room","useState","peers","setpeers","on","user_id","console","log","emit","navigator","mediaDevices","getUserMedia","audio","then","stream","connectOther","call","answer","user_video","addingVideo","err","close","map","data","index","key","App","sensitive","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8JAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I,mGCWVC,EAhBI,SAACC,GAOhB,OACI,oCACC,4BAAQC,QARb,WAGID,EAAME,QAAQC,KAAd,2BADW,YAMV,eACA,qD,+XCNT,IAAMC,EAAO,IAAIC,SAAKC,EAAU,CAC5BC,KAAK,kCACLC,KAAK,UACLC,QAAO,EACHC,OAAO,CACXC,WAAY,CAAC,CACTC,KAAM,CAAE,6BACR,CACAC,SAAU,mGACVC,WAAY,uCACZF,KAAM,CACF,4CACA,8CACA,4CACA,8CACA,8CACA,qDAONG,EAASC,IAAGC,QAAQ,4CASpBC,EAAYC,IAAOC,IAAV,KASTC,EAAcF,IAAOG,MAAV,KAMXC,EAAQ,SAACvB,GACX,IAAMwB,EAAMC,mBAOZ,OALAC,qBAAU,WACFF,EAAIG,QAAQC,UAAY5B,EAAM6B,MAEnC,IAGC,kBAACR,EAAD,CAAaS,aAAW,EAACC,UAAQ,EAACP,IAAKA,KA2HhCQ,EApHF,SAAChC,GACb,IAAD,EAE8BiC,mBAAS,IAFvC,mBAEWC,EAFX,KAEkBC,EAFlB,KAkCIT,qBAAU,WAMNtB,EAAKgC,GAAG,QAAO,SAAAC,GAEXC,QAAQC,IAAIF,GACJA,EACRtB,EAAOyB,KAAK,WAAW,GAAGH,MAExBI,UAAUC,aAAaC,aAAa,CACtCrB,OAAM,EACNsB,OAAM,IACRC,MAAK,SAAAC,GAGH/B,EAAOqB,GAAG,cAAa,SAAAC,GAEnBC,QAAQC,IAAI,aAAaF,GACzBU,EAAaV,EAAQS,MAEzB1C,EAAKgC,GAAG,QAAO,SAAAY,GAEXV,QAAQC,IAAI,WACZS,EAAKC,OAAOH,GACZE,EAAKZ,GAAG,UAAS,SAAAc,GAEbC,EAAYD,YAM5B9C,EAAKgC,GAAG,SAAQ,SAACgB,GAEbd,QAAQC,IAAIa,MAGpBhD,EAAKgC,GAAG,cAAa,WAEjBE,QAAQC,IAAI,gBAKhBnC,EAAKgC,GAAG,gBAAe,SAACtC,GAEvBwC,QAAQC,IAAI,SACZxB,EAAOyB,KAAK,QAAQ,MACpBzB,EAAOsC,aAEN,IACF,IAAMN,EAAc,SAACV,EAAQS,GAEzBR,QAAQC,IAAI,UACCnC,EAAK4C,KAAKX,EAAQS,GAC1BV,GAAG,UAAS,SAAAc,GAEbC,EAAYD,OAIdC,EAAc,SAACD,GAEpBf,GAAS,SAAAD,GAAK,4BAAOA,GAAP,CAAagB,QAE5B,OAEI,kBAAChC,EAAD,KACCgB,EAAMoB,KAAI,SAACC,EAAKC,GAErB,OACI,kBAAC,EAAD,CAAOC,IAAKD,EAAO3B,IAAK0B,SClKbG,MAZf,WAEE,OADApB,QAAQC,IAAI,eAEV,kBAAC,IAAD,KACE,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAO/B,KAAK,2BAA2BmD,WAAS,EAACC,UAAW5B,IAC1D,kBAAC,IAAD,CAAOxB,KAAK,eAAeqD,OAAK,EAACD,UAAW7D,OCChC+D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB9B,WACrBA,UAAU+B,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.ece95c19.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 92;","import React from \"react\";\r\nimport { v1 as uuid } from \"uuid\";\r\n\r\nconst CreateRoom = (props) => {\r\n    function create() {\r\n        // const id = uuid();\r\n        const id = \"hello\";\r\n        props.history.push(`/video_chat/room/${id}`);\r\n    }\r\n\r\n    return (\r\n        <>\r\n         <button onClick={create}>Create room</button>\r\n         <p>Hello how ar evv you</p>\r\n        </>\r\n       \r\n    );\r\n};\r\n\r\nexport default CreateRoom;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"peerjs\"\r\nimport styled from \"styled-components\";\r\n\r\n\r\n\r\nconst peer = new Peer(undefined,{\r\n    host:'safe-cliffs-70260.herokuapp.com',\r\n    path:'/peerjs',\r\n    secure:true,\r\n        config:{\r\n    iceServers: [{\r\n        urls: [ \"stun:bn-turn1.xirsys.com\" ]\r\n     }, {\r\n        username: \"cGq48tUvpp_2SRN3Yo9D7W4pbdoflVIzkjP10sD23ezzLE2IQu_0cR3yug8TO2HgAAAAAF9AF3lrYW5kZWxzaGFpbGVzaA==\",\r\n        credential: \"31a5ee30-e3df-11ea-be7f-0242ac140004\",\r\n        urls: [\r\n            \"turn:bn-turn1.xirsys.com:80?transport=udp\",\r\n            \"turn:bn-turn1.xirsys.com:3478?transport=udp\",\r\n            \"turn:bn-turn1.xirsys.com:80?transport=tcp\",\r\n            \"turn:bn-turn1.xirsys.com:3478?transport=tcp\",\r\n            \"turns:bn-turn1.xirsys.com:443?transport=tcp\",\r\n            \"turns:bn-turn1.xirsys.com:5349?transport=tcp\"\r\n        ]\r\n     }]\r\n   }\r\n})\r\n\r\n\r\nconst socket = io.connect('https://safe-cliffs-70260.herokuapp.com/');\r\n// const peer = new Peer(undefined,{\r\n//     host:'localhost',\r\n//     path:'/peerjs',\r\n//     port:'8000'\r\n// })\r\n// const socket = io.connect('http://localhost:8000/');\r\n\r\n\r\nconst Container = styled.div`\r\n    padding: 20px;\r\n    display: flex;\r\n    height: 100vh;\r\n    width: 90%;\r\n    margin: 20;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nconst StyledVideo = styled.video`\r\n    height: 30%;\r\n    width: 30%;\r\n    margin-left: 20px;\r\n`;\r\n\r\nconst Video = (props) => {\r\n    const ref = useRef();\r\n\r\n    useEffect(() => {\r\n            ref.current.srcObject = props.src;\r\n        \r\n    }, []);\r\n\r\n    return (\r\n        <StyledVideo playsInline autoPlay ref={ref} />\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nconst Room = (props) =>\r\n{\r\n\r\n    const [peers, setpeers] = useState([]);\r\n    // const peer = new Peer(undefined,{\r\n    //     host:'safe-cliffs-70260.herokuapp.com',\r\n    //     path:'/peerjs',\r\n    //     secure:true\r\n    // })\r\n\r\n        // {\r\n    //     key:'53eaa146-e3dc-11ea-8114-0242ac150003',\r\n    //     debug:3,\r\n    //    config:{\r\n    //     iceServers: [{\r\n    //         urls: [ \"stun:bn-turn1.xirsys.com\" ]\r\n    //      }, {\r\n    //         username: \"cGq48tUvpp_2SRN3Yo9D7W4pbdoflVIzkjP10sD23ezzLE2IQu_0cR3yug8TO2HgAAAAAF9AF3lrYW5kZWxzaGFpbGVzaA==\",\r\n    //         credential: \"31a5ee30-e3df-11ea-be7f-0242ac140004\",\r\n    //         url: [\r\n    //             \"turn:bn-turn1.xirsys.com:80?transport=udp\",\r\n    //             \"turn:bn-turn1.xirsys.com:3478?transport=udp\",\r\n    //             \"turn:bn-turn1.xirsys.com:80?transport=tcp\",\r\n    //             \"turn:bn-turn1.xirsys.com:3478?transport=tcp\",\r\n    //             \"turns:bn-turn1.xirsys.com:443?transport=tcp\",\r\n    //             \"turns:bn-turn1.xirsys.com:5349?transport=tcp\"\r\n    //         ]\r\n    //      }]\r\n    //    }\r\n    // }\r\n    \r\n\r\n\r\n   \r\n\r\n    useEffect(()=>\r\n    {      \r\n      \r\n\r\n        var userId= '';\r\n    \r\n        peer.on('open',user_id=>\r\n        {\r\n            console.log(user_id);\r\n            userId= user_id;\r\n            socket.emit(\"userjoin\",10,user_id);\r\n        })\r\n              navigator.mediaDevices.getUserMedia({\r\n            video:true,\r\n            audio:true}\r\n        ).then(stream=>\r\n        { \r\n            // addingVideo(stream);\r\n            socket.on(\"userjoined\",user_id=>\r\n            {\r\n                console.log(\"UserID is \",user_id)      \r\n                connectOther(user_id,stream);\r\n            })   \r\n            peer.on('call',call =>\r\n            {\r\n                console.log(\"Calling\");\r\n                call.answer(stream);\r\n                call.on('stream',user_video=>\r\n                {\r\n                    addingVideo(user_video);\r\n                })\r\n            })\r\n        })\r\n    \r\n    \r\n    peer.on('error',(err)=>\r\n    {\r\n        console.log(err);\r\n    })\r\n\r\npeer.on('connection',()=>\r\n{\r\n    console.log(\"Connected\");\r\n})\r\n   \r\n\r\n\r\npeer.on('disconnected',(id)=>\r\n{\r\n console.log(\"Close\");\r\n socket.emit('close','he');\r\n socket.close();\r\n})\r\n},[])\r\nconst connectOther= (user_id,stream) =>\r\n{\r\n    console.log('Called');       \r\n    const call = peer.call(user_id,stream);\r\n    call.on('stream',user_video=>\r\n    {\r\n        addingVideo(user_video)\r\n    })\r\n}\r\n\r\nconst addingVideo = (user_video) =>\r\n{\r\n setpeers(peers =>[...peers,user_video])   \r\n}   \r\nreturn(\r\n\r\n    <Container>\r\n    {peers.map((data,index)=>\r\n    {\r\nreturn(\r\n    <Video key={index} src={data}></Video>)\r\n    })}\r\n\r\n    </Container>\r\n)\r\n}\r\n\r\nexport default Room;\r\n","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport CreateRoom from \"./routes/CreateRoom\";\r\nimport Room from \"./routes/Room\";\r\n\r\nfunction App() {\r\n  console.log(\"Hello world\");\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n      <Route path=\"/video_chat/room/:roomID\" sensitive component={Room} />\r\n        <Route path=\"/video_chat/\" exact component={CreateRoom} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}