{"version":3,"sources":["routes/CreateRoom.js","routes/Room.js","App.js","serviceWorker.js","index.js"],"names":["CreateRoom","props","onClick","id","uuid","history","push","Container","styled","div","StyledVideo","video","Video","ref","useRef","useEffect","peer","on","stream","current","srcObject","playsInline","autoPlay","videoConstraints","height","window","innerHeight","width","innerWidth","Room","useState","peers","setPeers","socketRef","userVideo","peersRef","roomID","match","params","console","log","io","connect","navigator","mediaDevices","getUserMedia","audio","then","emit","users","forEach","userID","userToSignal","callerID","Peer","initiator","trickle","signal","createPeer","peerID","payload","incomingSignal","addPeer","find","p","muted","map","index","key","App","path","exact","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c0052933.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { v1 as uuid } from \"uuid\";\r\n\r\nconst CreateRoom = (props) => {\r\n    function create() {\r\n        const id = uuid();\r\n        props.history.push(`/video_chat/room/${id}`);\r\n    }\r\n\r\n    return (\r\n        <button onClick={create}>Create room</button>\r\n    );\r\n};\r\n\r\nexport default CreateRoom;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    padding: 20px;\r\n    display: flex;\r\n    height: 100vh;\r\n    width: 90%;\r\n    margin: 20;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nconst StyledVideo = styled.video`\r\n    height: 30%;\r\n    width: 30%;\r\n    margin-left: 20px;\r\n`;\r\n\r\nconst Video = (props) => {\r\n    const ref = useRef();\r\n\r\n    useEffect(() => {\r\n        props.peer.on(\"stream\", stream => {\r\n            ref.current.srcObject = stream;\r\n        })\r\n    }, []);\r\n\r\n    return (\r\n        <StyledVideo playsInline autoPlay ref={ref} />\r\n    );\r\n}\r\n\r\n\r\nconst videoConstraints = {\r\n    height: window.innerHeight / 2,\r\n    width: window.innerWidth / 2\r\n};\r\n\r\nconst Room = (props) => {\r\n    const [peers, setPeers] = useState([]);\r\n    const socketRef = useRef();\r\n    const userVideo = useRef();\r\n    const peersRef = useRef([]);\r\n    const roomID = props.match.params.roomID;\r\n\r\n    useEffect(() => {\r\n        console.log(\"Connected\");\r\n        socketRef.current = io.connect(\"/\");\r\n        console.log(socketRef.current);\r\n        navigator.mediaDevices.getUserMedia({ video: videoConstraints, audio: true }).then(stream => {\r\n            userVideo.current.srcObject = stream;\r\n            socketRef.current.emit(\"join room\", roomID);\r\n            socketRef.current.on(\"all users\", users => {\r\n                const peers = [];\r\n                users.forEach(userID => {\r\n                    console.log(userID);\r\n                    const peer = createPeer(userID, socketRef.current.id, stream);\r\n                    peersRef.current.push({\r\n                        peerID: userID,\r\n                        peer,\r\n                    })\r\n                    peers.push(peer);\r\n                })\r\n                setPeers(peers);\r\n            })\r\n\r\n            socketRef.current.on(\"user joined\", payload => {\r\n                const peer = addPeer(payload.signal, payload.callerID, stream);\r\n                console.log(payload);\r\n                peersRef.current.push({\r\n                    peerID: payload.callerID,\r\n                    peer,\r\n                })\r\n\r\n                setPeers(users => [...users, peer]);\r\n            });\r\n\r\n            socketRef.current.on(\"receiving returned signal\", payload => {\r\n                const item = peersRef.current.find(p => p.peerID === payload.id);\r\n                item.peer.signal(payload.signal);\r\n            });\r\n        })\r\n    }, []);\r\n\r\n    function createPeer(userToSignal, callerID, stream) {\r\n        const peer = new Peer({\r\n            initiator: true,\r\n            trickle: false,\r\n            stream,\r\n        });\r\n\r\n        peer.on(\"signal\", signal => {\r\n            socketRef.current.emit(\"sending signal\", { userToSignal, callerID, signal })\r\n        })\r\n\r\n        return peer;\r\n    }\r\n\r\n    function addPeer(incomingSignal, callerID, stream) {\r\n        const peer = new Peer({\r\n            initiator: false,\r\n            trickle: false,\r\n            stream,\r\n        })\r\n\r\n        peer.on(\"signal\", signal => {\r\n            socketRef.current.emit(\"returning signal\", { signal, callerID })\r\n        })\r\n\r\n        peer.signal(incomingSignal);\r\n\r\n        return peer;\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <StyledVideo muted ref={userVideo} autoPlay playsInline />\r\n            {peers.map((peer, index) => {\r\n                return (\r\n                    <Video key={index} peer={peer} />\r\n                );\r\n            })}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Room;\r\n","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport CreateRoom from \"./routes/CreateRoom\";\r\nimport Room from \"./routes/Room\";\r\n\r\nfunction App() {\r\n  console.log(\"Hello world\");\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path=\"/video_chat/\" exact component={CreateRoom} />\r\n        <Route path=\"/video_chat/room/:roomID\" component={Room} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}